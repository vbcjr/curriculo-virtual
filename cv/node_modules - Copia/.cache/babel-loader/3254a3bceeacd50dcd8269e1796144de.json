{"ast":null,"code":"\"use strict\";\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst pluralize = require('pluralize');\n\nmodule.exports = {\n  getRemovable,\n  createId,\n  deepQuery\n}; // Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\n\nfunction getRemovable(db, opts) {\n  const _ = this;\n\n  const removable = [];\n\n  _.each(db, (coll, collName) => {\n    _.each(coll, doc => {\n      _.each(doc, (value, key) => {\n        if (new RegExp(`${opts.foreignKeySuffix}$`).test(key)) {\n          // Remove foreign key suffix and pluralize it\n          // Example postId -> posts\n          const refName = pluralize.plural(key.replace(new RegExp(`${opts.foreignKeySuffix}$`), '')); // Test if table exists\n\n          if (db[refName]) {\n            // Test if references is defined in table\n            const ref = _.getById(db[refName], value);\n\n            if (_.isUndefined(ref)) {\n              removable.push({\n                name: collName,\n                id: doc.id\n              });\n            }\n          }\n        }\n      });\n    });\n  });\n\n  return removable;\n} // Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\n\n\nfunction createId(coll) {\n  const _ = this;\n\n  const idProperty = _.__id();\n\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    let id = _(coll).maxBy(idProperty)[idProperty]; // Increment integer id or generate string id\n\n\n    return _.isFinite(id) ? ++id : nanoid(7);\n  }\n}\n\nfunction deepQuery(value, q) {\n  const _ = this;\n\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (const k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/lucas/Desktop/TI/Entreprise-connection-fase-2-2022/node_modules/json-server/lib/server/mixins.js"],"names":["nanoid","require","pluralize","module","exports","getRemovable","createId","deepQuery","db","opts","_","removable","each","coll","collName","doc","value","key","RegExp","foreignKeySuffix","test","refName","plural","replace","ref","getById","isUndefined","push","name","id","idProperty","__id","isEmpty","maxBy","isFinite","q","isArray","i","length","isObject","k","toString","toLowerCase","indexOf"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst {\n  nanoid\n} = require('nanoid');\n\nconst pluralize = require('pluralize');\n\nmodule.exports = {\n  getRemovable,\n  createId,\n  deepQuery\n}; // Returns document ids that have unsatisfied relations\n// Example: a comment that references a post that doesn't exist\n\nfunction getRemovable(db, opts) {\n  const _ = this;\n\n  const removable = [];\n\n  _.each(db, (coll, collName) => {\n    _.each(coll, doc => {\n      _.each(doc, (value, key) => {\n        if (new RegExp(`${opts.foreignKeySuffix}$`).test(key)) {\n          // Remove foreign key suffix and pluralize it\n          // Example postId -> posts\n          const refName = pluralize.plural(key.replace(new RegExp(`${opts.foreignKeySuffix}$`), '')); // Test if table exists\n\n          if (db[refName]) {\n            // Test if references is defined in table\n            const ref = _.getById(db[refName], value);\n\n            if (_.isUndefined(ref)) {\n              removable.push({\n                name: collName,\n                id: doc.id\n              });\n            }\n          }\n        }\n      });\n    });\n  });\n\n  return removable;\n} // Return incremented id or uuid\n// Used to override lodash-id's createId with utils.createId\n\n\nfunction createId(coll) {\n  const _ = this;\n\n  const idProperty = _.__id();\n\n  if (_.isEmpty(coll)) {\n    return 1;\n  } else {\n    let id = _(coll).maxBy(idProperty)[idProperty]; // Increment integer id or generate string id\n\n\n    return _.isFinite(id) ? ++id : nanoid(7);\n  }\n}\n\nfunction deepQuery(value, q) {\n  const _ = this;\n\n  if (value && q) {\n    if (_.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (_.deepQuery(value[i], q)) {\n          return true;\n        }\n      }\n    } else if (_.isObject(value) && !_.isArray(value)) {\n      for (const k in value) {\n        if (_.deepQuery(value[k], q)) {\n          return true;\n        }\n      }\n    } else if (value.toString().toLowerCase().indexOf(q) !== -1) {\n      return true;\n    }\n  }\n}"]},"metadata":{},"sourceType":"script"}