{"ast":null,"code":"\"use strict\";\n\nconst express = require('express');\n\nconst methodOverride = require('method-override');\n\nconst _ = require('lodash');\n\nconst lodashId = require('lodash-id');\n\nconst low = require('lowdb');\n\nconst Memory = require('lowdb/adapters/Memory');\n\nconst FileSync = require('lowdb/adapters/FileSync');\n\nconst bodyParser = require('../body-parser');\n\nconst validateData = require('./validate-data');\n\nconst plural = require('./plural');\n\nconst nested = require('./nested');\n\nconst singular = require('./singular');\n\nconst mixins = require('../mixins');\n\nmodule.exports = (db, opts) => {\n  opts = Object.assign({\n    foreignKeySuffix: 'Id',\n    _isFake: false\n  }, opts);\n\n  if (typeof db === 'string') {\n    db = low(new FileSync(db));\n  } else if (!_.has(db, '__chain__') || !_.has(db, '__wrapped__')) {\n    db = low(new Memory()).setState(db);\n  } // Create router\n\n\n  const router = express.Router(); // Add middlewares\n\n  router.use(methodOverride());\n  router.use(bodyParser);\n  validateData(db.getState()); // Add lodash-id methods to db\n\n  db._.mixin(lodashId); // Add specific mixins\n\n\n  db._.mixin(mixins); // Expose database\n\n\n  router.db = db; // Expose render\n\n  router.render = (req, res) => {\n    res.jsonp(res.locals.data);\n  }; // GET /db\n\n\n  router.get('/db', (req, res) => {\n    res.jsonp(db.getState());\n  }); // Handle /:parent/:parentId/:resource\n\n  router.use(nested(opts)); // Create routes\n\n  db.forEach((value, key) => {\n    if (_.isPlainObject(value)) {\n      router.use(`/${key}`, singular(db, key, opts));\n      return;\n    }\n\n    if (_.isArray(value)) {\n      router.use(`/${key}`, plural(db, key, opts));\n      return;\n    }\n\n    const sourceMessage = ''; // if (!_.isObject(source)) {\n    //   sourceMessage = `in ${source}`\n    // }\n\n    const msg = `Type of \"${key}\" (${typeof value}) ${sourceMessage} is not supported. ` + `Use objects or arrays of objects.`;\n    throw new Error(msg);\n  }).value();\n  router.use((req, res) => {\n    if (!res.locals.data) {\n      res.status(404);\n      res.locals.data = {};\n    }\n\n    router.render(req, res);\n  });\n  router.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n  return router;\n};","map":{"version":3,"sources":["C:/Users/lucas/Desktop/TI/Entreprise-connection-fase-2-2022/node_modules/json-server/lib/server/router/index.js"],"names":["express","require","methodOverride","_","lodashId","low","Memory","FileSync","bodyParser","validateData","plural","nested","singular","mixins","module","exports","db","opts","Object","assign","foreignKeySuffix","_isFake","has","setState","router","Router","use","getState","mixin","render","req","res","jsonp","locals","data","get","forEach","value","key","isPlainObject","isArray","sourceMessage","msg","Error","status","err","next","console","error","stack","send"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst express = require('express');\n\nconst methodOverride = require('method-override');\n\nconst _ = require('lodash');\n\nconst lodashId = require('lodash-id');\n\nconst low = require('lowdb');\n\nconst Memory = require('lowdb/adapters/Memory');\n\nconst FileSync = require('lowdb/adapters/FileSync');\n\nconst bodyParser = require('../body-parser');\n\nconst validateData = require('./validate-data');\n\nconst plural = require('./plural');\n\nconst nested = require('./nested');\n\nconst singular = require('./singular');\n\nconst mixins = require('../mixins');\n\nmodule.exports = (db, opts) => {\n  opts = Object.assign({\n    foreignKeySuffix: 'Id',\n    _isFake: false\n  }, opts);\n\n  if (typeof db === 'string') {\n    db = low(new FileSync(db));\n  } else if (!_.has(db, '__chain__') || !_.has(db, '__wrapped__')) {\n    db = low(new Memory()).setState(db);\n  } // Create router\n\n\n  const router = express.Router(); // Add middlewares\n\n  router.use(methodOverride());\n  router.use(bodyParser);\n  validateData(db.getState()); // Add lodash-id methods to db\n\n  db._.mixin(lodashId); // Add specific mixins\n\n\n  db._.mixin(mixins); // Expose database\n\n\n  router.db = db; // Expose render\n\n  router.render = (req, res) => {\n    res.jsonp(res.locals.data);\n  }; // GET /db\n\n\n  router.get('/db', (req, res) => {\n    res.jsonp(db.getState());\n  }); // Handle /:parent/:parentId/:resource\n\n  router.use(nested(opts)); // Create routes\n\n  db.forEach((value, key) => {\n    if (_.isPlainObject(value)) {\n      router.use(`/${key}`, singular(db, key, opts));\n      return;\n    }\n\n    if (_.isArray(value)) {\n      router.use(`/${key}`, plural(db, key, opts));\n      return;\n    }\n\n    const sourceMessage = ''; // if (!_.isObject(source)) {\n    //   sourceMessage = `in ${source}`\n    // }\n\n    const msg = `Type of \"${key}\" (${typeof value}) ${sourceMessage} is not supported. ` + `Use objects or arrays of objects.`;\n    throw new Error(msg);\n  }).value();\n  router.use((req, res) => {\n    if (!res.locals.data) {\n      res.status(404);\n      res.locals.data = {};\n    }\n\n    router.render(req, res);\n  });\n  router.use((err, req, res, next) => {\n    console.error(err.stack);\n    res.status(500).send(err.stack);\n  });\n  return router;\n};"]},"metadata":{},"sourceType":"script"}